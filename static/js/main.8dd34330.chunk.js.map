{"version":3,"sources":["Components/List.js","App.js","serviceWorker.js","index.js"],"names":["List","_this","this","react_default","a","createElement","props","name","map","n","index","key","className","onClick","delete","bind","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","input","target","value","handleClick","state","length","newArray","push","handleDelete","item","newName","filter","type","placeholder","onChange","List_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEqBA,0LACV,IAAAC,EAAAC,KAEP,OACEC,EAAAC,EAAAC,cAAA,WACGH,KAAKI,MAAMC,KAAKC,IAAI,SAACC,EAAGC,GAYvB,OAVEP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,GACND,EACDN,EAAAC,EAAAC,cAAA,UACEO,UAAU,iBACVC,QAASZ,EAAKK,MAAMQ,OAAOC,KAAKd,EAAMS,IAFxC,qBAToBM,cCmDnBC,cAjDb,SAAAA,EAAYX,GAAO,IAAAL,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAAhB,KAAAe,IACjBhB,EAAAiB,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAApB,KAAMI,KAMRiB,aAAe,SAAAC,GACbvB,EAAKwB,SAAS,CAAEC,MAAOF,EAAEG,OAAOC,SARf3B,EAUnB4B,YAAc,WAEZ,GAAgC,IAA5B5B,EAAK6B,MAAMJ,MAAMK,OAAc,CACjC,IAAIC,EAAW/B,EAAK6B,MAAMvB,KAAKC,IAAI,SAAAD,GACjC,OAAOA,IAETyB,EAASC,KAAKhC,EAAK6B,MAAMJ,OACzBzB,EAAKwB,SAAS,CAAElB,KAAMyB,MAjBP/B,EAoBnBiC,aAAe,SAAAC,GAEb,IAAIC,EAAUnC,EAAK6B,MAAMvB,KAAK8B,OAAO,SAAC9B,EAAMG,GAE1C,OAAeA,IAAUyB,EAAO5B,EAAO,KAEzCN,EAAKwB,SAAS,CAAElB,KAAM6B,KAxBtBnC,EAAK6B,MAAQ,CACXvB,KAAM,CAAC,UAAW,QAAS,QAAS,eAAgB,aACpDmB,MAAO,IAJQzB,wEA6BjB,OACEE,EAAAC,EAAAC,cAAA,OAAKO,UAAU,mBACbT,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SACEO,UAAU,WACV0B,KAAK,OACLC,YAAY,wBACZC,SAAUtC,KAAKqB,eAEjBpB,EAAAC,EAAAC,cAAA,UAAQO,UAAU,kBAAkBC,QAASX,KAAK2B,aAAlD,OAIA1B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoC,EAAD,CAAMlC,KAAML,KAAK4B,MAAMvB,KAAMO,OAAQZ,KAAKgC,uBA5ChClB,aCSE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8dd34330.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class List extends Component {\n  render() {\n    let div;\n    return (\n      <div>\n        {this.props.name.map((n, index) => {\n          div = (\n            <h4 key={index}>\n              {n}\n              <button\n                className=\"btn btn-danger\"\n                onClick={this.props.delete.bind(this, index)}\n              >\n                Delete\n              </button>\n            </h4>\n          );\n          return div;\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport List from \"./Components/List\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: [\"Uniform\", \"Shoes\", \"Books\", \"Stationeries\", \"Lunch Box\"],\n      input: \"\"\n    };\n  }\n  handleChange = e => {\n    this.setState({ input: e.target.value });\n  };\n  handleClick = () => {\n    // console.log(this.state.input);\n    if (this.state.input.length !== 0) {\n      let newArray = this.state.name.map(name => {\n        return name;\n      });\n      newArray.push(this.state.input);\n      this.setState({ name: newArray });\n    }\n  };\n  handleDelete = item => {\n    // console.log(\"Delete Clicked\");\n    let newName = this.state.name.filter((name, index) => {\n      // if (name !== item) return name;\n      return (name = index !== item ? name : \"\");\n    });\n    this.setState({ name: newName });\n  };\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <h2>Check List</h2>\n        <input\n          className=\"add-todo\"\n          type=\"text\"\n          placeholder=\"Enter the todo to add\"\n          onChange={this.handleChange}\n        />\n        <button className=\"btn btn-primary\" onClick={this.handleClick}>\n          Add\n        </button>\n\n        <br />\n        <List name={this.state.name} delete={this.handleDelete} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}